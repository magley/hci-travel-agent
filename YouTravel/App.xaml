<Application x:Class="YouTravel.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:YouTravel" xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
			 StartupUri="Agent/AgentMainWindow.xaml">
    <Application.Resources>
		<!-- Other styles -->

		<!-- https://stackoverflow.com/questions/13624606-->
		<Style x:Key="TransparentStyle" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Border Background="Transparent">
							<ContentPresenter/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Foreground" Value="White"/>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Cursor" Value="Hand"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type Image}">
			<Setter Property="RenderOptions.BitmapScalingMode" Value="Fant" />
		</Style>

		<!-- Dark Theme -->

		<SolidColorBrush x:Key="bg_dark0" Color="#1F1F1F"/>
		<SolidColorBrush x:Key="bg_dark1" Color="#2E2E2E"/>
		<SolidColorBrush x:Key="bg_dark2" Color="#383838"/>
		<SolidColorBrush x:Key="bg_dark3" Color="#666666"/>
		<SolidColorBrush x:Key="bg_dark4" Color="#858585"/>

		<Style TargetType="{x:Type Window}" x:Key="WinDark">
			<Setter Property="FontSize" Value="16"/>
			<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type UserControl}" x:Key="UCDark">
			<Setter Property="FontSize" Value="16"/>
			<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type Page}" x:Key="PageDark">
			<Setter Property="FontSize" Value="16"/>
			<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type ToolTip}">
			<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type Button}">
			<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
			<Setter Property="Foreground" Value="White"/>

			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderBrush="LightGray" BorderThickness="1">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark3}"/>
					<Setter Property="Cursor" Value="Hand"/>
				</Trigger>

				<Trigger Property="IsPressed" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark4}"/>
				</Trigger>

				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Background" Value="{DynamicResource bg_dark0}"/>
					<Setter Property="Foreground" Value="LightGray"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type Label}">
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type CheckBox}">
			<Setter Property="Background" Value="{DynamicResource bg_dark4}"/>
			<Setter Property="Foreground" Value="White"/>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Cursor" Value="Hand"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type RadioButton}">
			<Setter Property="Background" Value="{DynamicResource bg_dark4}"/>
			<Setter Property="Foreground" Value="White"/>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Cursor" Value="Hand"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type TextBox}">
			<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type ListBox}">
			<Setter Property="Background" Value="{DynamicResource bg_dark0}"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type ListBoxItem}">
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type TabControl}">
			<Setter Property="Background" Value="{DynamicResource bg_dark0}"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type TabItem}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TabItem}">
						<Grid>
							<Border 
                             Name="Border"
                             Background="#F0F0F0"
                             BorderBrush="LightGray" 
                             BorderThickness="1,1,1,0" 
                             CornerRadius="4,4,0,0" 
                             Margin="0,0,2,0" SnapsToDevicePixels="True" >
								<TextBlock FontSize="15" 
                                       HorizontalAlignment="Center" 
                                       Name="TextBlock" 
                                       Foreground="DarkGray">
                            <ContentPresenter x:Name="ContentSite"
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Center"
                                               ContentSource="Header"
                                               Margin="12,2,12,2"/>
								</TextBlock>
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsSelected" Value="True">
								<Setter TargetName="Border" Property="Background" Value="{DynamicResource bg_dark3}"/>
								<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource bg_dark3}"/>
								<Setter TargetName="TextBlock" Property="Background" Value="{DynamicResource bg_dark2}"/>
								<Setter TargetName="TextBlock" Property="Foreground" Value="White"/>
								<Setter TargetName="TextBlock" Property="FontWeight" Value="SemiBold"/>
								<Setter TargetName="TextBlock" Property="FontSize" Value="14"/>
								<Setter TargetName="Border" Property="Margin" Value="0,0,2,-1" />
							</Trigger>
							<Trigger Property="IsSelected" Value="False">
								<Setter TargetName="Border" Property="Background" Value="{DynamicResource bg_dark1}"/>
								<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource bg_dark1}"/>
								<Setter TargetName="TextBlock" Property="Background" Value="{DynamicResource bg_dark0}"/>
								<Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource bg_dark3}"/>
								<Setter TargetName="TextBlock" Property="FontSize" Value="14"/>
								<Setter TargetName="Border" Property="Margin" Value="0,0,2,-1" />
							</Trigger>
							<Trigger Property="IsMouseOver" Value="True" SourceName="Border" >
								<Setter TargetName="Border" Property="Background" Value="White" />
								<Setter TargetName="Border" Property="BorderBrush" Value="DarkGray" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style TargetType="{x:Type TreeView}">
			<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<Style TargetType="{x:Type TreeViewItem}">
			<Setter Property="Foreground" Value="White"/>
		</Style>

		<!-- Toolbar Theme -->

		<Style TargetType="{x:Type ToolBar}">
			<Setter Property="Padding" Value="0"/>
			<Setter Property="Background" Value="{DynamicResource bg_dark0}"/>
			<Setter Property="Foreground" Value="White"/>
			<Setter Property="FontSize" Value="16"/>
		</Style>

		<Style TargetType="{x:Type ToolBarTray}">
			<Setter Property="Background" Value="{DynamicResource bg_dark0}"/>
			<Style.Triggers>
				<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
					<Setter Property="Background" Value="{DynamicResource bg_dark0}"/>
				</DataTrigger>
			</Style.Triggers>
		</Style>

		<SolidColorBrush x:Key="ToolBarButtonHover" Color="#FF0080FF"/>
		<SolidColorBrush x:Key="ToolBarMenuBorder" Color="#FFB6BDC5"/>
		<SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FF1f1f1f"/>
		<SolidColorBrush x:Key="ToolBarVerticalBackground" Color="#FFEEF5FD"/>
		<SolidColorBrush x:Key="ToolBarGripper" Color="#FF6D6D6D"/>
		<SolidColorBrush x:Key="ToolBarToggleButtonHorizontalBackground" Color="#FFEEF5FD"/>
		<SolidColorBrush x:Key="ToolBarToggleButtonVerticalBackground" Color="#FFEEF5FD"/>
		<Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
			<Setter Property="Margin" Value="0,0,11,0"/>
			<Setter Property="CornerRadius" Value="3,3,3,3"/>
			<Style.Triggers>
				<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
					<Setter Property="CornerRadius" Value="0,0,0,0"/>
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<!-- The thingy to move toolbars around -->
						<Border Background="Transparent" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
							<Rectangle>
								<Rectangle.Fill>
									<DrawingBrush TileMode="Tile" ViewboxUnits="Absolute" Viewbox="0,0,4,4" ViewportUnits="Absolute" Viewport="0,0,4,4">
										<DrawingBrush.Drawing>
											<DrawingGroup>
												<GeometryDrawing Brush="Gray" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
												<GeometryDrawing Brush="{StaticResource bg_dark0}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
											</DrawingGroup>
										</DrawingBrush.Drawing>
									</DrawingBrush>
								</Rectangle.Fill>
							</Rectangle>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Cursor" Value="SizeAll"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">

			<Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>
			<Setter Property="MinHeight" Value="0"/>
			<Setter Property="MinWidth" Value="0"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<!-- Thingy with the arrow at the end of every toolbar. -->
						<Border x:Name="Bd" Visibility="Visible" Background="{StaticResource bg_dark0}" CornerRadius="0,3,3,0" SnapsToDevicePixels="true">
							<Canvas HorizontalAlignment="Right" Height="7" Margin="7,2,2,2" SnapsToDevicePixels="true" VerticalAlignment="Bottom" Width="6">
								<!-- 2 elements were removed here, which effectively draw a shadow for the little arrow thing. -->
								<Path Data="M 0 0.5 L 5 0.5" Stroke="{TemplateBinding Foreground}"/>
								<Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{TemplateBinding Foreground}"/>
							</Canvas>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" TargetName="Bd" Value="{StaticResource bg_dark2}"/>
							</Trigger>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="Background" TargetName="Bd" Value="{StaticResource bg_dark2}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Visibility" Value="Collapsed"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
					<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
			<Setter Property="MinHeight" Value="0"/>
			<Setter Property="MinWidth" Value="0"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,0,3,3" SnapsToDevicePixels="true">
							<Canvas HorizontalAlignment="Right" Height="6" Margin="2,7,2,2" SnapsToDevicePixels="true" VerticalAlignment="Bottom" Width="7">
								<Path Data="M 1.5 1 L 1.5 6" Stroke="White"/>
								<Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}"/>
								<Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="White"/>
								<Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}"/>
							</Canvas>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
							</Trigger>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
					<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<ControlTemplate x:Key="ToolBarTemplate1" TargetType="{x:Type ToolBar}">
			<Grid x:Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="true">
				<Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
					<!-- Background and Foreground are changed here. -->
					<ToggleButton x:Name="OverflowButton" 
								  Background="{DynamicResource bg_dark3}"
								  Foreground="White"
								  ClickMode="Press" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"/>
					<Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuFade}}" StaysOpen="false">
						<theme:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
							<Border x:Name="ToolBarSubMenuBorder" Background="{StaticResource ToolBarSubMenuBackground}" BorderBrush="{StaticResource ToolBarMenuBorder}" BorderThickness="1" RenderOptions.ClearTypeHint="Enabled">
								<ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle" FocusVisualStyle="{x:Null}" Focusable="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200"/>
							</Border>
						</theme:SystemDropShadowChrome>
					</Popup>
				</Grid>
				<Border x:Name="MainPanelBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Style="{StaticResource ToolBarMainPanelBorderStyle}">
					<DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
						<Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
						<ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
						<ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</DockPanel>
				</Border>
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="IsOverflowOpen" Value="true">
					<Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
				</Trigger>
				<Trigger Property="Header" Value="{x:Null}">
					<Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="ToolBarTray.IsLocked" Value="true">
					<Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="true">
					<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
					<Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="true"/>
					<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
				</Trigger>
				<Trigger Property="Orientation" Value="Vertical">
					<Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
					<Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
					<Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
					<Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
					<Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
					<Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
					<Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
					<Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
					<Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
					<Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
					<Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
					<Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
					<Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
					<Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
					<Setter Property="Background" Value="{StaticResource ToolBarVerticalBackground}"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="false">
					<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>

		<!-- Menu Theme -->
		<!--
			How to use:
			Given the following menu hierarchy:
		
			<Menu>
				<MenuItem>
					<MenuItem>
						<MenuItem/>
						<MenuItem/>
					<MenuItem/>
				</MenuItem>
			</Menu>
		
			Apply templates like so:
		
			<Menu>
				<MenuItem>
					<MenuItem     Template="{DynamicResource MenuItemTemplate}">
						<MenuItem Template="{DynamicResource FinalSubMenuItemTemplate}"/>
						<MenuItem Template="{DynamicResource FinalSubMenuItemTemplate}"/>
					<MenuItem     Template="{DynamicResource FinalSubMenuItemTemplate}"/>
				</MenuItem>
			</Menu>
		
			If level 1 menu item -> don't apply any template.
			If menuitem has children -> apply MenuItemTemplate.
			Else apply FinalSubMenuItemTemplate.
			Source: https://www.reddit.com/r/csharp/comments/dubxh1
		-->

		<!--Menu style. automatically does stuff so no need to use template things. -->
		<Style TargetType="{x:Type Menu}">
			<Setter Property="Background" Value="{StaticResource bg_dark0}"/>
			<Setter Property="Foreground" Value="White"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="FontSize" Value="16"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Menu}">
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--MenuItem style-->

		<Style TargetType="{x:Type MenuItem}">
			<Setter Property="Padding" Value="6"/>
			<Style.Triggers>
				<Trigger Property="MenuItem.Role" Value="TopLevelHeader">
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type MenuItem}">
								<Border x:Name="templateRoot" SnapsToDevicePixels="true"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}">
									<Grid VerticalAlignment="Center">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto"/>
											<ColumnDefinition Width="Auto"/>
										</Grid.ColumnDefinitions>
										<ContentPresenter x:Name="Icon" ContentSource="Icon" 
                                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                                          HorizontalAlignment="Center" Width="16" Height="16" Margin="3"/>
										<Path x:Name="GlyphPanel" Data="F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z" FlowDirection="LeftToRight" Margin="3"
                                              Visibility="Collapsed" VerticalAlignment="Center" Fill="White"/>
										<ContentPresenter Grid.Column="1" ContentSource="Header" RecognizesAccessKey="true"
                                                          Margin="{TemplateBinding Control.Padding}"
                                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>

										<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" 
                                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" 
                                                   Placement="Bottom"
                                                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   PlacementTarget="{Binding ElementName=templateRoot}">

											<!-- Menu background color is changed here vvvv -->
											<Border x:Name="SubMenuBorder" Background="{StaticResource bg_dark1}" BorderBrush="{StaticResource bg_dark1}"
                                                    BorderThickness="1" Padding="2">
												<ScrollViewer x:Name="SubMenuScrollViewer"
                                                             Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
													<Grid RenderOptions.ClearTypeHint="Enabled">
														<Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
															<Rectangle Name="OpaqueRect" Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                                                                           Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}"
                                                                           Fill="{Binding ElementName=SubMenuBorder, Path=Background}"/>
														</Canvas>
														<ItemsPresenter x:Name="ItemsPresenter" 
                                                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                            KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true"
                                                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
													</Grid>
												</ScrollViewer>
											</Border>
										</Popup>

									</Grid>
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
										<Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
									</Trigger>
									<Trigger Value="{x:Null}" Property="MenuItem.Icon">
										<Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
									</Trigger>
									<Trigger Property="MenuItem.IsChecked" Value="true">
										<Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
										<Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
									</Trigger>
									<!--Mouse Over basically-->
									<Trigger Property="MenuItem.IsHighlighted" Value="true">
										<Setter TargetName="templateRoot" Value="#3e3e40" Property="Background"/>
										<Setter TargetName="templateRoot" Value="#3e3e40" Property="BorderBrush"/>
									</Trigger>
									<Trigger Property="UIElement.IsEnabled" Value="false">
										<Setter TargetName="templateRoot" Value="#FF707070" Property="TextElement.Foreground"/>
										<Setter TargetName="GlyphPanel" Value="#FF707070" Property="Shape.Fill"/>
									</Trigger>
									<Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
										<Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                                                Property="Canvas.Top"/>
										<Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                                                Property="Canvas.Left"/>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>

		<ControlTemplate x:Key="MenuItemTemplate" TargetType="{x:Type MenuItem}">
			<Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
				<Grid Margin="-1">
					<Grid.ColumnDefinitions>
						<ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
						<ColumnDefinition Width="13"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="30"/>
						<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
						<ColumnDefinition Width="20"/>
					</Grid.ColumnDefinitions>
					<ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
					<Border x:Name="GlyphPanel" Background="#771b1b1c" BorderBrush="#99FBFF" BorderThickness="1" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
						<Path x:Name="Glyph" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="#99FBFF" FlowDirection="LeftToRight" Height="11" Width="9"/>
					</Border>
					<ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
					<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
					<Path x:Name="RightArrow" Grid.Column="5" Data="M0,0L4,3.5 0,7z" Fill="White" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center"/>
					<Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
						<!-- Submenu background color is changed here vvvv -->
						<Border x:Name="SubMenuBorder" Background="{StaticResource bg_dark1}" BorderBrush="{StaticResource bg_dark1}" BorderThickness="1" Padding="2">
							<ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
										<Rectangle x:Name="OpaqueRect" 
                                                       Fill="{Binding Background, ElementName=SubMenuBorder}" 
                                                       Height="{Binding ActualHeight, ElementName=SubMenuBorder}" 
                                                       Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
									</Canvas>
									<ItemsPresenter x:Name="ItemsPresenter" 
                                                        KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                        Grid.IsSharedSizeScope="True" 
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                        KeyboardNavigation.TabNavigation="Cycle"/>
								</Grid>
							</ScrollViewer>
						</Border>
					</Popup>
				</Grid>
			</Border>
			<ControlTemplate.Triggers>
				<Trigger Property="IsSuspendingPopupAnimation" Value="True">
					<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
				</Trigger>
				<Trigger Property="Icon" Value="{x:Null}">
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsChecked" Value="True">
					<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsHighlighted" Value="True">
					<Setter TargetName="templateRoot" Value="#3e3e40" Property="Background"/>
					<Setter TargetName="templateRoot" Value="#3e3e40" Property="BorderBrush"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
					<Setter Property="Fill" TargetName="Glyph" Value="#FF707070"/>
					<Setter Property="Fill" TargetName="RightArrow" Value="#FF707070"/>
				</Trigger>
				<Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
					<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
					<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>

		<ControlTemplate x:Key="FinalSubMenuItemTemplate" TargetType="{x:Type MenuItem}">
			<Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
				<Grid Margin="-1">
					<Grid.ColumnDefinitions>
						<ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
						<ColumnDefinition Width="13"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="30"/>
						<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
						<ColumnDefinition Width="20"/>
					</Grid.ColumnDefinitions>
					<ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
					<Border x:Name="GlyphPanel" Background="#771b1b1c" BorderBrush="#99FBFF" BorderThickness="1" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
						<Path x:Name="Glyph" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="#99FBFF" FlowDirection="LeftToRight" Height="11" Width="9"/>
					</Border>
					<ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
					<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
					<Path x:Name="RightArrow" Fill="Transparent"/>
					<Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
						<Border x:Name="SubMenuBorder" Background="#771b1b1c" BorderBrush="#99FBFF" BorderThickness="1" Padding="2">
							<ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
										<Rectangle x:Name="OpaqueRect" 
                                                       Fill="{Binding Background, ElementName=SubMenuBorder}" 
                                                       Height="{Binding ActualHeight, ElementName=SubMenuBorder}" 
                                                       Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
									</Canvas>
									<!--<Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>-->
									<ItemsPresenter x:Name="ItemsPresenter" 
                                                        KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                        Grid.IsSharedSizeScope="True" 
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                        KeyboardNavigation.TabNavigation="Cycle"/>
								</Grid>
							</ScrollViewer>
						</Border>
					</Popup>
				</Grid>
			</Border>
			<ControlTemplate.Triggers>
				<Trigger Property="IsSuspendingPopupAnimation" Value="True">
					<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
				</Trigger>
				<Trigger Property="Icon" Value="{x:Null}">
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsChecked" Value="True">
					<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
					<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
				</Trigger>
				<Trigger Property="IsHighlighted" Value="True">
					<Setter TargetName="templateRoot" Value="#3e3e40" Property="Background"/>
					<Setter TargetName="templateRoot" Value="#3e3e40" Property="BorderBrush"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
					<Setter Property="Fill" TargetName="Glyph" Value="#FF707070"/>
					<Setter Property="Fill" TargetName="RightArrow" Value="#FF707070"/>
				</Trigger>
				<Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
					<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
					<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>

		<!-- List/Table/Grid stuff is below -->

		<Style TargetType="{x:Type ListView}">
			<Setter Property="Background" Value="{DynamicResource bg_dark2}"/>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark2}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type ListViewItem}">
			<Setter Property="Foreground" Value="White"/>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
				</Trigger>

				<Trigger Property="IsSelected" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark4}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type GridViewColumnHeader}">
			<Setter Property="Background" Value="{DynamicResource bg_dark3}"/>
			<Setter Property="Foreground" Value="White"/>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
				</Trigger>

				<Trigger Property="IsPressed" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark4}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type DataGrid}">
			<Setter Property="Background" Value="{DynamicResource bg_dark2}"/>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark2}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type DataGridRow}">
			<Setter Property="Background" Value="{DynamicResource bg_dark2}"/>
			<Setter Property="Foreground" Value="White"/>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
				</Trigger>

				<Trigger Property="IsSelected" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark4}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type DataGridColumnHeader}">
			<Setter Property="Background" Value="{DynamicResource bg_dark3}"/>
			<Setter Property="Foreground" Value="White"/>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark1}"/>
				</Trigger>

				<Trigger Property="IsPressed" Value="True">
					<Setter Property="Background" Value="{DynamicResource bg_dark4}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		
		<!-- Scrollbar -->

		<SolidColorBrush x:Key="StandardBorderBrush" Color="#888" />
		<SolidColorBrush x:Key="StandardBackgroundBrush" Color="Black" />
		<SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
		<SolidColorBrush x:Key="SelectedBackgroundBrush" Color="Gray" />
		<SolidColorBrush x:Key="SelectedForegroundBrush" Color="White" />
		<SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
		<SolidColorBrush x:Key="GlyphBrush" Color="#444" />
		<SolidColorBrush x:Key="NormalBrush" Color="#888" />
		<SolidColorBrush x:Key="NormalBorderBrush" Color="#888" />
		<SolidColorBrush x:Key="HorizontalNormalBrush" Color="#FF686868" />
		<SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />

		<LinearGradientBrush x:Key="ListBoxBackgroundBrush" StartPoint="0,0" EndPoint="1,0.001">
			<GradientBrush.GradientStops>
				<GradientStopCollection>
					<GradientStop Color="White" Offset="0.0" />
					<GradientStop Color="White" Offset="0.6" />
					<GradientStop Color="#DDDDDD" Offset="1.2"/>
				</GradientStopCollection>
			</GradientBrush.GradientStops>
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="StandardBrush" StartPoint="0,0" EndPoint="0,1">
			<GradientBrush.GradientStops>
				<GradientStopCollection>
					<GradientStop Color="#FFF" Offset="0.0"/>
					<GradientStop Color="#CCC" Offset="1.0"/>
				</GradientStopCollection>
			</GradientBrush.GradientStops>
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
			<GradientBrush.GradientStops>
				<GradientStopCollection>
					<GradientStop Color="#BBB" Offset="0.0"/>
					<GradientStop Color="#EEE" Offset="0.1"/>
					<GradientStop Color="#EEE" Offset="0.9"/>
					<GradientStop Color="#FFF" Offset="1.0"/>
				</GradientStopCollection>
			</GradientBrush.GradientStops>
		</LinearGradientBrush>

		<Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="Visibility" Value="Hidden"/>
			<Setter Property="SnapsToDevicePixels" Value="True"/>
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Border Name="Border" Margin="1" CornerRadius="2" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1">
							<Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsPressed" Value="true">
								<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="Visibility" Value="Hidden"/>
			<Setter Property="SnapsToDevicePixels" Value="True"/>
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Border Background="Black" />
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
			<Setter Property="SnapsToDevicePixels" Value="True"/>
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border CornerRadius="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"  Width="16" Margin="8,0,-2,0"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition MaxHeight="0"/>
					<RowDefinition Height="0.00001*"/>
					<RowDefinition MaxHeight="0"/>
				</Grid.RowDefinitions>
				<Border Grid.RowSpan="3" CornerRadius="2" Background="Transparent" />
				<RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
				<Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
					<Track.DecreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
					</Track.DecreaseRepeatButton>
					<Track.Thumb>
						<Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" Background="{StaticResource HorizontalNormalBrush}" BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
					</Track.Thumb>
					<Track.IncreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
					</Track.IncreaseRepeatButton>
				</Track>
				<RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z"/>
			</Grid>
		</ControlTemplate>
		<ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition MaxWidth="18"/>
					<ColumnDefinition Width="0.00001*"/>
					<ColumnDefinition MaxWidth="18"/>
				</Grid.ColumnDefinitions>
				<Border Grid.ColumnSpan="3" CornerRadius="2" Background="#F0F0F0"/>
				<RepeatButton Grid.Column="0"  Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
				<Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
					<Track.DecreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
					</Track.DecreaseRepeatButton>
					<Track.Thumb>
						<Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" />
					</Track.Thumb>
					<Track.IncreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
					</Track.IncreaseRepeatButton>
				</Track>
				<RepeatButton Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z"/>
			</Grid>
		</ControlTemplate>
		<Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
			<Setter Property="SnapsToDevicePixels" Value="True"/>
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Style.Triggers>
				<Trigger Property="Orientation" Value="Horizontal">
					<Setter Property="Width" Value="Auto"/>
					<Setter Property="Height" Value="18" />
					<Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
				</Trigger>
				<Trigger Property="Orientation" Value="Vertical">
					<Setter Property="Width" Value="18"/>
					<Setter Property="Height" Value="Auto" />
					<Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
			<Setter Property="OverridesDefaultStyle" Value="True"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollViewer}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<ScrollContentPresenter Grid.Column="1"/>
							<ScrollBar Name="PART_VerticalScrollBar" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
							<ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="1" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		
		
		<!-- CALENDAR -->
		<SolidColorBrush x:Key="calendar_dayOfWeek" Color="BlanchedAlmond"/>
		<SolidColorBrush x:Key="calendar_innerBorderColor" Color="#FFDEDEDE"/>
		<Color x:Key="calendar_headerBg" R="#1F" G="#1F" B="#1F" A="255"/>
		<Color x:Key="calendar_bodyBg" R="#2E" G="#2E" B="#2E" A="255"/>
		<SolidColorBrush x:Key="calendar_todayBg" Color="DimGray"/>
		<SolidColorBrush x:Key="calendar_todayFg" Color="Purple"/>
		<SolidColorBrush x:Key="calendar_selectedBg" Color="DarkOliveGreen"/>
		<SolidColorBrush x:Key="calendar_highlightBg" Color="OliveDrab"/>
		<SolidColorBrush x:Key="calendar_dayFg" Color="White"/>
		<Color x:Key="calendar_dayBg_col_inactive" R="#6F" G="#6F" B="#6F" A="255"/>

		<SolidColorBrush x:Key="calendar_arrowCol" Color="GhostWhite"/>
		<SolidColorBrush x:Key="calendar_headerCol" Color="GhostWhite"/>
		<SolidColorBrush x:Key="calendar_monthYearCol" Color="GhostWhite"/>

		<sys:Double x:Key="calendar_DayOfWeekfontSize">16</sys:Double>
		<sys:Double x:Key="calendar_HeaderfontSize">12</sys:Double>
		<sys:Double x:Key="calendar_DayfontSize">16</sys:Double>
		
		<Thickness x:Key="calendar_outerBorderThickness">0</Thickness>
		<CornerRadius x:Key="calendar_outerBorderRadius">0</CornerRadius>
		<Thickness x:Key="calendar_innerBorderThickness">1</Thickness>
		<CornerRadius x:Key="calendar_innerBorderRadius">0</CornerRadius>

		<ControlTemplate x:Key="CalendarItemTemplate1" TargetType="{x:Type CalendarItem}">
			<ControlTemplate.Resources>
				<DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
					<TextBlock Foreground="{StaticResource calendar_dayOfWeek}" FontFamily="Verdana" FontWeight="Bold" FontSize="{StaticResource calendar_DayOfWeekfontSize}" HorizontalAlignment="Center" Margin="0,6,0,6" Text="{Binding}" VerticalAlignment="Center"/>
				</DataTemplate>
			</ControlTemplate.Resources>
			<Grid x:Name="PART_Root">
				<Grid.Resources>
					<SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF"/>
				</Grid.Resources>
				<VisualStateManager.VisualStateGroups>
					<VisualStateGroup x:Name="CommonStates">
						<VisualState x:Name="Normal"/>
						<VisualState x:Name="Disabled">
							<Storyboard>
								<DoubleAnimation Duration="0" Storyboard.TargetName="PART_DisabledVisual" To="1" Storyboard.TargetProperty="Opacity"/>
							</Storyboard>
						</VisualState>
					</VisualStateGroup>
				</VisualStateManager.VisualStateGroups>
				<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{StaticResource calendar_outerBorderThickness}" CornerRadius="{StaticResource calendar_outerBorderRadius}">
					<Border BorderBrush="{StaticResource calendar_innerBorderColor}" BorderThickness="{StaticResource calendar_innerBorderThickness}" CornerRadius="{StaticResource calendar_innerBorderRadius}">
						<Grid>
							<Grid.Resources>
								<ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
									<Grid Cursor="Hand">
										<VisualStateManager.VisualStateGroups>
											<VisualStateGroup x:Name="CommonStates">
												<VisualState x:Name="Normal"/>
												<VisualState x:Name="MouseOver">
													<Storyboard>
														<ColorAnimation Duration="0" Storyboard.TargetName="path" To="#FF73A9D8" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"/>
													</Storyboard>
												</VisualState>
												<VisualState x:Name="Disabled">
													<Storyboard>
														<DoubleAnimation Duration="0" Storyboard.TargetName="path" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)"/>
													</Storyboard>
												</VisualState>
											</VisualStateGroup>
										</VisualStateManager.VisualStateGroups>
										<Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
										<Grid>
											<Path x:Name="path" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z" Fill="{StaticResource calendar_arrowCol}" HorizontalAlignment="Left" Height="10" Margin="14,-6,0,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
										</Grid>
									</Grid>
								</ControlTemplate>
								<ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
									<Grid Cursor="Hand">
										<VisualStateManager.VisualStateGroups>
											<VisualStateGroup x:Name="CommonStates">
												<VisualState x:Name="Normal"/>
												<VisualState x:Name="MouseOver">
													<Storyboard>
														<ColorAnimation Duration="0" Storyboard.TargetName="path" To="#FF73A9D8" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"/>
													</Storyboard>
												</VisualState>
												<VisualState x:Name="Disabled">
													<Storyboard>
														<DoubleAnimation Duration="0" Storyboard.TargetName="path" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)"/>
													</Storyboard>
												</VisualState>
											</VisualStateGroup>
										</VisualStateManager.VisualStateGroups>
										<Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
										<Grid>
											<Path x:Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z" Fill="{StaticResource calendar_arrowCol}" HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
										</Grid>
									</Grid>
								</ControlTemplate>
								<ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
									<Grid Cursor="Hand">
										<VisualStateManager.VisualStateGroups>
											<VisualStateGroup x:Name="CommonStates">
												<VisualState x:Name="Normal"/>
												<VisualState x:Name="MouseOver">
													<Storyboard>
														<ColorAnimation Duration="0" Storyboard.TargetName="buttonContent" To="#FF73A9D8" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
													</Storyboard>
												</VisualState>
												<VisualState x:Name="Disabled">
													<Storyboard>
														<DoubleAnimation Duration="0" Storyboard.TargetName="buttonContent" To=".5" Storyboard.TargetProperty="Opacity"/>
													</Storyboard>
												</VisualState>
											</VisualStateGroup>
										</VisualStateManager.VisualStateGroups>
										<ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="{StaticResource calendar_headerCol}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,4,1,9" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
									</Grid>
								</ControlTemplate>
							</Grid.Resources>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<Button x:Name="PART_PreviousButton" Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" Grid.Row="0" Template="{StaticResource PreviousButtonTemplate}" Width="28"/>
							<Button x:Name="PART_HeaderButton" Grid.Column="1" Focusable="False" FontWeight="Bold" FontSize="{StaticResource calendar_HeaderfontSize}" HorizontalAlignment="Center" Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}" VerticalAlignment="Center"/>
							<Button x:Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" Grid.Row="0" Template="{StaticResource NextButtonTemplate}" Width="28"/>
							<Grid x:Name="PART_MonthView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-1,6,6" Grid.Row="1" Visibility="Visible">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
							</Grid>
							<Grid x:Name="PART_YearView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-3,7,6" Grid.Row="1" Visibility="Hidden">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
							</Grid>
						</Grid>
					</Border>
				</Border>
				<Rectangle x:Name="PART_DisabledVisual" Fill="{StaticResource DisabledColor}" Opacity="0" RadiusX="2" RadiusY="2" Stroke="{StaticResource DisabledColor}" Stretch="Fill" StrokeThickness="1" Visibility="Collapsed"/>
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible"/>
				</Trigger>
				<DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
					<Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
					<Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
				</DataTrigger>
				<DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
					<Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
					<Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
				</DataTrigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>
		<Style TargetType="{x:Type Calendar}">
			<Setter Property="Foreground" Value="#FF333333"/>
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
						<GradientStop Color="{StaticResource calendar_headerBg}" Offset="0.16"/>
						<GradientStop Color="{StaticResource calendar_bodyBg}" Offset="0.16"/>
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Setter Property="BorderBrush">
				<Setter.Value>
					<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
						<GradientStop Color="#FFA3AEB9" Offset="0"/>
						<GradientStop Color="#FF8399A9" Offset="0.375"/>
						<GradientStop Color="#FF718597" Offset="0.375"/>
						<GradientStop Color="#FF617584" Offset="1"/>
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Calendar}">
						<StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
							<CalendarItem Template="{DynamicResource CalendarItemTemplate1}" x:Name="PART_CalendarItem" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Style="{TemplateBinding CalendarItemStyle}"/>
						</StackPanel>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="CalendarCalendarDayButtonStyle1" TargetType="{x:Type CalendarDayButton}">
			<Setter Property="MinWidth" Value="5"/>
			<Setter Property="MinHeight" Value="5"/>
			<Setter Property="FontSize" Value="{StaticResource calendar_DayfontSize}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type CalendarDayButton}">
						<Grid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0:0:0.1"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<DoubleAnimation Duration="0" Storyboard.TargetName="HighlightBackground" To="0.5" Storyboard.TargetProperty="Opacity"/>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed">
										<Storyboard>
											<DoubleAnimation Duration="0" Storyboard.TargetName="HighlightBackground" To="0.5" Storyboard.TargetProperty="Opacity"/>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Disabled">
										<Storyboard>
											<DoubleAnimation Duration="0" Storyboard.TargetName="HighlightBackground" To="0" Storyboard.TargetProperty="Opacity"/>
											<DoubleAnimation Duration="0" Storyboard.TargetName="NormalText" To=".35" Storyboard.TargetProperty="Opacity"/>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="SelectionStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="Unselected"/>
									<VisualState x:Name="Selected">
										<Storyboard>
											<DoubleAnimation Duration="0" Storyboard.TargetName="SelectedBackground" To=".75" Storyboard.TargetProperty="Opacity"/>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="CalendarButtonFocusStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="CalendarButtonFocused">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility">
												<DiscreteObjectKeyFrame KeyTime="0">
													<DiscreteObjectKeyFrame.Value>
														<Visibility>Visible</Visibility>
													</DiscreteObjectKeyFrame.Value>
												</DiscreteObjectKeyFrame>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="CalendarButtonUnfocused">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility">
												<DiscreteObjectKeyFrame KeyTime="0">
													<DiscreteObjectKeyFrame.Value>
														<Visibility>Collapsed</Visibility>
													</DiscreteObjectKeyFrame.Value>
												</DiscreteObjectKeyFrame>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="ActiveStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="Active"/>
									<VisualState x:Name="Inactive">
										<Storyboard>
											<ColorAnimation Duration="0" Storyboard.TargetName="NormalText" To="{StaticResource calendar_dayBg_col_inactive}" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="DayStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="RegularDay"/>
									<VisualState x:Name="Today">
										<Storyboard>
											<DoubleAnimation Duration="0" Storyboard.TargetName="TodayBackground" To="1" Storyboard.TargetProperty="Opacity"/>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="BlackoutDayStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="NormalDay"/>
									<VisualState x:Name="BlackoutDay">
										<Storyboard>
											<DoubleAnimation Duration="0" Storyboard.TargetName="Blackout" To=".2" Storyboard.TargetProperty="Opacity"/>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Rectangle x:Name="TodayBackground" Fill="{StaticResource calendar_todayBg}" Opacity="0" RadiusX="1" RadiusY="1"/>
							<Rectangle x:Name="SelectedBackground" Fill="{StaticResource calendar_selectedBg}" Opacity="0" RadiusX="1" RadiusY="1"/>
							<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
							<Rectangle x:Name="HighlightBackground" Fill="{StaticResource calendar_highlightBg}" Opacity="0" RadiusX="1" RadiusY="1"/>
							<ContentPresenter x:Name="NormalText" TextElement.Foreground="White" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,1,5,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<Path x:Name="Blackout" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z" Fill="#FF000000" HorizontalAlignment="Stretch" Margin="3" Opacity="0" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Stretch"/>
							<Rectangle x:Name="DayButtonFocusVisual" IsHitTestVisible="false" RadiusX="0" RadiusY="0" Stroke="#FF45D6FA" Visibility="Collapsed"/>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="CalendarCalendarButtonStyle1" TargetType="{x:Type CalendarButton}">
			<Setter Property="Background" Value="#FFBADDE9"/>
			<Setter Property="MinWidth" Value="40"/>
			<Setter Property="MinHeight" Value="42"/>
			<Setter Property="FontSize" Value="{StaticResource calendar_DayfontSize}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type CalendarButton}">
						<Grid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0:0:0.1"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<DoubleAnimation Duration="0" Storyboard.TargetName="Background" To=".5" Storyboard.TargetProperty="Opacity"/>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed">
										<Storyboard>
											<DoubleAnimation Duration="0" Storyboard.TargetName="Background" To=".5" Storyboard.TargetProperty="Opacity"/>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="SelectionStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="Unselected"/>
									<VisualState x:Name="Selected">
										<Storyboard>
											<DoubleAnimation Duration="0" Storyboard.TargetName="SelectedBackground" To=".75" Storyboard.TargetProperty="Opacity"/>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="ActiveStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="Active"/>
									<VisualState x:Name="Inactive">
										<Storyboard>
											<ColorAnimation Duration="0" Storyboard.TargetName="NormalText" To="#FF777777" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="CalendarButtonFocusStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0"/>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="CalendarButtonFocused">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility">
												<DiscreteObjectKeyFrame KeyTime="0">
													<DiscreteObjectKeyFrame.Value>
														<Visibility>Visible</Visibility>
													</DiscreteObjectKeyFrame.Value>
												</DiscreteObjectKeyFrame>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="CalendarButtonUnfocused">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility">
												<DiscreteObjectKeyFrame KeyTime="0">
													<DiscreteObjectKeyFrame.Value>
														<Visibility>Collapsed</Visibility>
													</DiscreteObjectKeyFrame.Value>
												</DiscreteObjectKeyFrame>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Rectangle x:Name="SelectedBackground" Fill="{TemplateBinding Background}" Opacity="0" RadiusX="1" RadiusY="1"/>
							<Rectangle x:Name="Background" Fill="{TemplateBinding Background}" Opacity="0" RadiusX="1" RadiusY="1"/>
							<ContentPresenter x:Name="NormalText" TextElement.Foreground="{StaticResource calendar_monthYearCol}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,0,1,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<Rectangle x:Name="CalendarButtonFocusVisual" IsHitTestVisible="false" RadiusX="1" RadiusY="1" Stroke="#FF45D6FA" Visibility="Collapsed"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True">
								<Setter Property="Visibility" TargetName="CalendarButtonFocusVisual" Value="Visible"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</Application.Resources>
</Application>
